/*
 * File: app/view/EmployeeFormViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.8.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.2.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.2.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('EmployeeApp.view.EmployeeFormViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.employeeform',

    onSaveCallback: function(record, operation, success) {
        var me = this,
            form = me.getView(),
            employeeStore = form.up('employeegrid').getViewModel().getStore('employee'),
            responseError, description;

        Ext.Viewport.setMasked(false);

        if (success) {
            record.endEdit();

            Ext.toast('Record saved!');

            form.hide();

            if (me.phantom) {
                // New record, so reload the grid's store to load all records
                employeeStore.reload();
            }

            me.redirectTo('employees');
        } else {
            if (operation.getError().response && operation.getError().response.responseJson) {
                responseError = operation.getError().response.responseJson;
                description = responseError.description || 'Unhandled error';

                Ext.Msg.alert('Error', 'An error has occurred when trying to save: ' + description);
            } else {
                Ext.Msg.alert('Error', 'An unknown error has occurred when trying to save. Please try again.');
            }

            record.cancelEdit();
        }
    },

    onConfirmDeleteCallback: function(buttonId, value) {
        var me = this,
            form = me.getView(),
            employeeStore = form.up('employeegrid').getViewModel().getStore('employee'),
            viewModel = me.getViewModel(),
            record = viewModel.get('employee');

        if (buttonId === 'yes') {
            Ext.Viewport.setMasked({
                xtype: 'loadmask',
                message: 'Deleting...'
            });

            employeeStore.remove(record);

            employeeStore.sync({
                callback: me.onDeleteCallback,
                scope: me
            });
        }
    },

    onDeleteCallback: function(batch, options) {
        var me = this,
            form = me.getView(),
            employeeStore = form.up('employeegrid').getViewModel().getStore('employee'),
            success = !batch.exception,
            operation, responseError, description;

        Ext.Viewport.setMasked(false);

        if (success) {
            Ext.toast('Record deleted!');

            form.setRecord(null);
            form.hide();

            me.redirectTo('employees');
        } else {
            employeeStore.rejectChanges();
            operation = batch.operations[0];

            if (operation.getError().response && operation.getError().response.responseJson) {
                responseError = operation.getError().response.responseJson;
                description = responseError.description || 'Unhandled error';

                Ext.Msg.alert('Error', 'An error has occurred when trying to delete: ' + description);
            } else {
                Ext.Msg.alert('Error', 'An unknown error has occurred when trying to delete. Please try again.');
            }
        }
    },

    loadRecord: function(record) {
        var me = this,
            form = me.getView(),
            grid = form.up('employeegrid'),
            viewModel = me.getViewModel(),
            previousRecord = viewModel.get('employee');

        if (previousRecord !== null) {
            previousRecord.cancelEdit();
            viewModel.set('employee', null);
        }

        if (record !== null) {
            me.prepareComboboxes(record);

            viewModel.set('employee', record);

            record.beginEdit();

            form.show();

            if (!record.phantom) {
                // If this isn't a phantom (new) record, select the associated row for the record in the grid
                grid.getSelectable().select(record);
            }
        } else {
            // Record no longer exists or was an invalid record id entered in URL, so do nothing
            form.hide();
        }
    },

    prepareComboboxes: function(record) {
        var me = this;

        me.lookupReference('countryCombo').setValue(record.get('jobCountry'));
        me.lookupReference('jobCodeCombo').setValue(record.get('jobCode'));
        me.lookupReference('jobGradeCombo').setValue(record.get('jobGrade'));
    },

    onCountryChange: function(combobox, newValue, oldValue, eOpts) {
        var me = this,
            view = me.getView(),
            parentView = view.up('employeegrid'),
            jobStore = parentView.getViewModel().getStore('job'),
            jobCodeStore = parentView.getViewModel().getStore('jobcode'),
            country = newValue,
            uniqueJobCodes, jobCodes, jobData;

        jobCodeStore.removeAll();

        if (country !== '') {
            jobStore.filter('jobCountry', newValue);
            jobData = [...jobStore.getData().items];
            jobStore.clearFilter();

            uniqueJobCodes = [...new Set(jobData.map(item => item.data.jobCode))];

            jobCodes = uniqueJobCodes.map(item => ({
                ['value']: item
            }));
            console.log(jobCodes);
            jobCodeStore.setData(jobCodes);
        }
    },

    onJobCodeChange: function(combobox, newValue, oldValue, eOpts) {
        var me = this,
            view = me.getView(),
            parentView = view.up('employeegrid'),
            jobStore = parentView.getViewModel().getStore('job'),
            jobGradeStore = parentView.getViewModel().getStore('jobgrade'),
            country = me.lookupReference('countryCombo').getValue(),
            jobCode = newValue,
            uniqueJobGrades, jobGrades, jobData;

        jobGradeStore.removeAll();

        if (country !== '' && newValue !== '') {
            jobStore.filter([{
                property: 'jobCountry',
                value: country
            }, {
                property: 'jobCode',
                value: newValue
            }]);

            jobData = [...jobStore.getData().items];

            jobStore.clearFilter();

            uniqueJobGrades = [...new Set(jobData.map(item => item.data.jobGrade))];

            jobGrades = uniqueJobGrades.map(item => ({
                ['value']: item
            }));

            jobGradeStore.setData(jobGrades);
        }
    },

    onJobGradeChange: function(combobox, newValue, oldValue, eOpts) {
        var me = this,
            view = me.getView(),
            parentView = view.up('employeegrid'),
            jobStore = parentView.getViewModel().getStore('job'),
            country = me.lookupReference('countryCombo').getValue(),
            jobCode = me.lookupReference('jobCodeCombo').getValue(),
            jobGrade = newValue,
            salaryField = me.lookupReference('salaryField'),
            minSalary = 0,
            maxSalary = 99999999,
            record;

        if (country !== '' && jobCode !== '' && jobGrade !== '') {
            jobStore.filter([{
                property: 'jobCountry',
                value: country
            }, {
                property: 'jobCode',
                value: jobCode
            }, {
                property: 'jobGrade',
                value: jobGrade
            }]);

            if (jobStore.getCount() > 0) {
                record = jobStore.getAt(0);
                minSalary = record.get('minSalary');
                maxSalary = record.get('maxSalary');
            }

            jobStore.clearFilter();
        }

        salaryField.setMinValue(minSalary);
        salaryField.setMaxValue(maxSalary);
        salaryField.validate();
    },

    onSaveTap: function(button, e, eOpts) {
        var me = this,
            form = me.getView(),
            record = me.getViewModel().get('employee');

        if (form.validate()) {
            Ext.Viewport.setMasked({
                xtype: 'loadmask',
                message: 'Saving...'
            });

            me.phantom = record.phantom;

            record.save({
                callback: me.onSaveCallback,
                scope: me
            });
        } else {
            Ext.Msg.alert('Validation error', 'There are validation errors. Please correct these before saving.');
        }
    },

    onCancelTap: function(button, e, eOpts) {
        var me = this;

        me.getViewModel().get('employee').cancelEdit();
        me.getViewModel().set('employee', null);

        me.getView().hide();

        me.redirectTo('employees');
    },

    onDeleteTap: function(button, e, eOpts) {
        var me = this;

        Ext.Msg.confirm('Delete record?', 'Are you sure you want to delete the selected employee record?', me.onConfirmDeleteCallback, me);
    }

});