/*
 * File: app/view/EmployeeGridViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.8.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.2.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.2.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('EmployeeApp.view.EmployeeGridViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.employeegrid',

    onGridSelect: function(dataview, selected, eOpts) {
        var me = this;

        me.redirectTo('employee/' + selected[0].getId());
    },

    onNewEmployeeTap: function(button, e, eOpts) {
        var me = this;

        me.redirectTo('employee/new');
    },

    onRefreshTap: function(button, e, eOpts) {
        var me = this,
            grid = me.getView(),
            store = grid.getStore().getSource();

        me.redirectTo('employees');

        store.reload();
    },

    onGridActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var me = this,
            departmentStore = Ext.getStore('Department'),
            employeeStore = me.getStore('employee'),
            jobStore = me.getStore('job');

        // Load the department store first, so we can group employees by departments
        departmentStore.on({
            load: function() {
                employeeStore.load();  // Then load the employees
            }
        });

        departmentStore.load();
        jobStore.load();
    },

    onJobStoreLoad: function(store, records, successful, operation, eOpts) {
        var me = this,
            view = me.getView(),
            countryStore = me.getStore('country'),
            uniqueCountries, countries;

        uniqueCountries = [...new Set(records.map(item => item.data.jobCountry))];

        countries = uniqueCountries.map(item => ({
            ['value']: item
        }));

        countryStore.setData(countries);
    }

});